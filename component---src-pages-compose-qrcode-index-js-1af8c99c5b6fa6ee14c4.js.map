{"version":3,"sources":["webpack://web/./src/pages/compose/qrcode/index.js","webpack://web/./src/pages/compose/qrcode/transformMatrixIntoPath.js"],"names":["Defs","G","Rect","ClipPath","Stop","value","size","color","style","backgroundColor","logo","logoSize","logoBackgroundColor","logoMargin","logoBorderRadius","quietZone","enableLinearGradient","gradientDirection","linearGradient","ecl","getRef","onError","result","useMemo","transformMatrixIntoPath","genMatrix","error","path","cellSize","ref","viewBox","join","width","height","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","x","y","fill","d","strokeLinecap","stroke","strokeWidth","logoPosition","logoBackgroundSize","logoBackgroundBorderRadius","rx","ry","clipPath","preserveAspectRatio","href","renderLogo","matrix","length","forEach","row","i","needDraw","column","j"],"mappings":"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","file":"component---src-pages-compose-qrcode-index-js-1af8c99c5b6fa6ee14c4.js","sourcesContent":["import React, { useMemo } from 'react';\n\nimport genMatrix from './genMatrix';\nimport transformMatrixIntoPath from './transformMatrixIntoPath';\n\nconst Svg = 'svg';\nconst Defs = 'defs';\nconst G = 'g';\nconst Path = 'path';\nconst Rect = 'rect';\nconst Image = 'image';\nconst ClipPath = 'clipPath';\nconst LinearGradient = 'linearGradient';\nconst Stop = 'stop';\n\n\nconst renderLogo = ({\n  size,\n  logo,\n  logoSize,\n  logoBackgroundColor,\n  logoMargin,\n  logoBorderRadius\n}) => {\n  const logoPosition = (size - logoSize - logoMargin * 2) / 2\n  const logoBackgroundSize = logoSize + logoMargin * 2\n  const logoBackgroundBorderRadius =\n    logoBorderRadius + (logoMargin / logoSize) * logoBorderRadius\n\n  return (\n    <G x={logoPosition} y={logoPosition}>\n      <Defs>\n        <ClipPath id='clip-logo-background'>\n          <Rect\n            width={logoBackgroundSize}\n            height={logoBackgroundSize}\n            rx={logoBackgroundBorderRadius}\n            ry={logoBackgroundBorderRadius}\n          />\n        </ClipPath>\n        <ClipPath id='clip-logo'>\n          <Rect\n            width={logoSize}\n            height={logoSize}\n            rx={logoBorderRadius}\n            ry={logoBorderRadius}\n          />\n        </ClipPath>\n      </Defs>\n      <G>\n        <Rect\n          width={logoBackgroundSize}\n          height={logoBackgroundSize}\n          fill={logoBackgroundColor}\n          clipPath='url(#clip-logo-background)'\n        />\n      </G>\n      <G x={logoMargin} y={logoMargin}>\n        <Image\n          width={logoSize}\n          height={logoSize}\n          preserveAspectRatio='xMidYMid slice'\n          href={logo}\n          clipPath='url(#clip-logo)'\n        />\n      </G>\n    </G>\n  )\n}\n\nconst QRCode = ({\n  value = 'hello world',\n  size = 100,\n  color = 'black',\n  style,\n  backgroundColor = 'white',\n  logo,\n  logoSize = size * 0.2,\n  logoBackgroundColor = 'transparent',\n  logoMargin = 2,\n  logoBorderRadius = 0,\n  quietZone = 0,\n  enableLinearGradient = false,\n  gradientDirection = ['0%', '0%', '100%', '100%'],\n  linearGradient = ['rgb(255,0,0)', 'rgb(0,255,255)'],\n  ecl = 'M',\n  getRef,\n  onError\n}) => {\n  const result = useMemo(() => {\n    try {\n      return transformMatrixIntoPath(genMatrix(value, ecl), size)\n    } catch (error) {\n      if (onError && typeof onError === 'function') {\n        onError(error)\n      } else {\n        // Pass the error when no handler presented\n        throw error\n      }\n    }\n  }, [value, size, ecl])\n\n  if (!result) {\n    return null\n  }\n\n  const { path, cellSize } = result\n\n  return (\n    <Svg\n      ref={getRef}\n      viewBox={[\n        -quietZone,\n        -quietZone,\n        size + quietZone * 2,\n        size + quietZone * 2\n      ].join(' ')}\n      width={size}\n      height={size}\n      style={style}\n    >\n      <Defs>\n        <LinearGradient\n          id='grad'\n          x1={gradientDirection[0]}\n          y1={gradientDirection[1]}\n          x2={gradientDirection[2]}\n          y2={gradientDirection[3]}\n        >\n          <Stop offset='0' stopColor={linearGradient[0]} stopOpacity='1' />\n          <Stop offset='1' stopColor={linearGradient[1]} stopOpacity='1' />\n        </LinearGradient>\n      </Defs>\n      <G>\n        <Rect\n          x={-quietZone}\n          y={-quietZone}\n          width={size + quietZone * 2}\n          height={size + quietZone * 2}\n          fill={backgroundColor}\n        />\n      </G>\n      <G>\n        <Path\n          d={path}\n          strokeLinecap='butt'\n          stroke={enableLinearGradient ? 'url(#grad)' : color}\n          strokeWidth={cellSize}\n        />\n      </G>\n      {logo &&\n        renderLogo({\n          size,\n          logo,\n          logoSize,\n          logoBackgroundColor,\n          logoMargin,\n          logoBorderRadius\n        })}\n    </Svg>\n  )\n}\n\nexport default QRCode;\n","export default (matrix, size) => {\n  const cellSize = size / matrix.length\n  let path = ''\n  matrix.forEach((row, i) => {\n    let needDraw = false\n    row.forEach((column, j) => {\n      if (column) {\n        if (!needDraw) {\n          path += `M${cellSize * j} ${cellSize / 2 + cellSize * i} `\n          needDraw = true\n        }\n        if (needDraw && j === matrix.length - 1) {\n          path += `L${cellSize * (j + 1)} ${cellSize / 2 + cellSize * i} `\n        }\n      } else {\n        if (needDraw) {\n          path += `L${cellSize * j} ${cellSize / 2 + cellSize * i} `\n          needDraw = false\n        }\n      }\n    })\n  })\n  return {\n    cellSize,\n    path\n  }\n}\n"],"sourceRoot":""}